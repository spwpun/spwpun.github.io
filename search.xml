<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Note</title>
    <url>/2049/09/01/Note/</url>
    <content><![CDATA[<h3 id="2019-10-17"><a href="#2019-10-17" class="headerlink" title="2019-10-17"></a>2019-10-17</h3><ol>
<li>这两天在公司没有样本分析，于是就看起了《IDA Pro》，慢慢看书梳理经历过的知识对我来说是一个很好的方法。</li>
<li>和同学约好周末一起去都江堰了。</li>
<li>认识的一个朋友又去深信服了，月薪10k+，3年后我会去哪里呢？</li>
</ol><a id="more"></a>
<h3 id="2019-10-13"><a href="#2019-10-13" class="headerlink" title="2019-10-13"></a>2019-10-13</h3><ol>
<li>这个星期在公司主要分析了宏病毒，使用VBE调试VB代码，很恶心的是居然使用宏代码进行注入，到最后也没能完全把注入的PE代码给提取出来，准备在自己的电脑上在试试吧。</li>
<li>毕设由于种种问题不能去研究所跟导师做了，现在很烦。</li>
<li>这个月的事不多，但都挺让人心烦意乱的了。</li>
</ol>
<h3 id="2019-10-07"><a href="#2019-10-07" class="headerlink" title="2019-10-07"></a>2019-10-07</h3><ol>
<li>这个新博客已经完善得差不多了，本来想加上评论系统的，但是一直出问题，而且发现评论系统的网站的访问速度有点慢，遂弃！</li>
<li>原来写过CSDN，也自己搭建过VPS上的blog，最终还是用这个吧，简单明了。</li>
<li>新的开始，保持记录吧！</li>
</ol>
<h3 id="2019-10-03"><a href="#2019-10-03" class="headerlink" title="2019-10-03"></a>2019-10-03</h3><ol>
<li>新建了依托于github的博客。</li>
<li>发现其实<code>hexo</code>挺强大的，后面也可以添加一些第三方服务，评论啊什么的，明天再弄吧！</li>
</ol>
<h3 id="2019-09-16"><a href="#2019-09-16" class="headerlink" title="2019-09-16"></a>2019-09-16</h3><ol>
<li>今天重新弄了一下这个博客，刚开始把什么开发过程全忘了，只能小心翼翼的在<code>Xshell</code>上弄，从删掉最丑的背景图开始，仔细检查服务器上的代码和本地的代码是否一致……</li>
<li>为了不让github提示我的代码有漏洞，决定将<code>Django</code>版本升级到<code>2.1.11</code>, 修改了<code>requirements.txt</code>中<code>django</code>对应的版本，使用<code>pip install -r requirements.txt</code>进行升级。</li>
<li>然后就遇到一个500(<code>Server error</code>)的<code>Bug</code>，经大佬们提醒，我暂时打开了<code>Debug</code>模式，仔细查看，才想起这是当初遇到的<code>Bug</code>,只要在<code>Python</code>的<code>base.py</code>中修改一下代码就可以了。</li>
<li>之后打算给小破站配个免费的<code>SSL</code>证书，然后鼓捣了一下午加一个晚上，服务器差点搞崩了，了解了<code>yum, python</code>之间的依赖关系，最后通过<code>Letsencrypt</code>的方法还是走不通，问了一下*哥，他说用<code>cloudfare+cdn</code>要好一点。</li>
<li>去查了一下这些个配置方法，好多，不想看，主要是思路和我这半天了解到的不太一样，没看懂。</li>
<li>回到搜索“最简单的免费配置<code>SSL</code>证书”上来，发现一个叫<code>Freessl</code>的网站，看他域名这么简单，应该也挺简单的吧！果然，证书生成、域名检测、部署配置一条龙打通，值得一提的是它的一键部署是将你本地生成的证书和私钥文件通过<code>SSH KEY</code>/服务器密码的方式直接传到你的服务器上，然后只需要在服务器上修改<code>nginx</code>配置，重启<code>nginx</code>就可以了。</li>
<li>最后，明天会有好事发生！Ebrn</li>
</ol>
<h3 id="2019-09-05"><a href="#2019-09-05" class="headerlink" title="2019-09-05"></a>2019-09-05</h3><ol>
<li>今天分析一个韩国的<code>hwp</code>样本，不知道自己为什么和喵喵比起来分析得那么慢，他说在网上搜索就直接有现成的分析报告，但是我的好像都没有，而且看日期还是前个星期才编译的呢。</li>
<li>样本属于宏病毒（实际上就是嵌套在文档中的脚本文件），<code>hwp</code>使用的是<code>PostScript</code>,早上看了其他类似的分析报告，了解了大致的分析思路，一整个下午就在调试，通过<code>OD</code>加载<code>hwp</code>的<code>gbb</code>可执行文件，来调试通过<code>hwpscan2</code>扫描出来的<code>ps</code>脚本，最后在内存中<code>Dump</code>出来了一个<code>PE</code>文件，用<code>ida</code>查看之后，发现是使用<code>Delphi</code>编译的<code>Dll</code>文件，和昨天分析那个一样，但是主要的功能和用<code>Systemtracer</code>监测到的不一样，估计还有其他的<code>PE</code>文件没有<code>dump</code>出来，或者<code>shellcode</code>。</li>
<li>越来越发现自己是一个赖不住寂寞的人，也才想着来自己的网站倾述自己一天的生活吧！</li>
</ol>
<h3 id="2019-09-03"><a href="#2019-09-03" class="headerlink" title="2019-09-03"></a>2019-09-03</h3><ol>
<li>今天分析一个<code>Delphi</code>编写的<code>Dll</code>，很多函数都是不能直接反编译的，开始了解花指令。</li>
<li>练习<code>PWN</code>，遇到整数溢出的题，属于上界溢出，由此可以利用栈溢出，很有意思，不过最后还是有点不太明白为什么要进入交互模式才能得到<code>flag</code>.</li>
<li>收集奖学金和保研的材料时，看着自己大三这一年的碌碌无为，参加了不少比赛，因为菜，而毫无作为！感到伤心。</li>
</ol>
<h3 id="2019-09-02"><a href="#2019-09-02" class="headerlink" title="2019-09-02"></a>2019-09-02</h3><ol>
<li>借鉴Sakura大佬的博客，我也写一个简短的生活记录吧！</li>
<li>暑假结束了，实习没有结束，一直在做病毒分析的工作，渐渐对二进制逆向和<code>pwn</code>产生了浓厚的兴趣。</li>
<li>保研虽然我们专业只有我和另外一位大佬竞争，按照往年的名额，感觉也可以，但我心里还是隐隐担心差那么一点点。</li>
<li>九推投了信工所，和之前联系的李*老师邮件交流，回复很快，挺开心。</li>
<li>校招投了奇安信，打算如果可以的话，之前自己去找实习吧。</li>
<li>在知乎上问了一个问题，得到了很多大佬的回答，感触良多，嗯，找准自己的方向，潜心修行吧！</li>
</ol>
]]></content>
      <categories>
        <category>Thought</category>
      </categories>
      <tags>
        <tag>Feelings</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA Pro阅读笔记</title>
    <url>/2019/10/23/IDA-Pro%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="《IDA-Pro权威指南（第二版）》阅读笔记"><a href="#《IDA-Pro权威指南（第二版）》阅读笔记" class="headerlink" title="《IDA Pro权威指南（第二版）》阅读笔记"></a>《IDA Pro权威指南（第二版）》阅读笔记</h3><p>趁着上班没有样本分析的时间把这本书看完吧！记录一些自己印象深刻的知识点。有些自己已经比较熟悉的点不会列出来了。</p><a id="more"></a>
<h4 id="第一部分-IDA简介"><a href="#第一部分-IDA简介" class="headerlink" title="第一部分 IDA简介"></a>第一部分 IDA简介</h4><h5 id="第1章-反汇编简介"><a href="#第1章-反汇编简介" class="headerlink" title="第1章 反汇编简介"></a>第1章 反汇编简介</h5><ol>
<li>模糊测试：模糊测试是一种发现漏洞的技术，它为程序输入大量不常见的输入，希望其中某些输入能对程序造成可被检测、分许，最终被利用的错误。</li>
<li>x86汇编语言的两种语法：Intel、AT&amp;T，gdb使用AT&amp;T语法，MASM、TASM、NASM使用Intel语法。</li>
<li>反汇编的算法有线性扫描、递归下降两种。</li>
</ol>
<h5 id="第2章-逆向与反汇编"><a href="#第2章-逆向与反汇编" class="headerlink" title="第2章 逆向与反汇编"></a>第2章 逆向与反汇编</h5><p>这一工具主要介绍了一些小工具。</p>
<ol>
<li><p>nm：摘要工具，用来列举目标文件的符号。</p>
</li>
<li><p>ldd：摘要工具，用来列举可执行文件所需的动态库，这才想起来之前做Pwn的时候，看到有别人用这个命令查看可执行文件的依赖库。</p>
</li>
</ol>
<h5 id="第3章-IDA-Pro背景知识"><a href="#第3章-IDA-Pro背景知识" class="headerlink" title="第3章 IDA Pro背景知识"></a>第3章 IDA Pro背景知识</h5><p>这一章主要讲了IDA的开发历史及其反盗版的一些措施，大致介绍了本书的一些关键性内容，其中讲插件的章节是在第17章，这是后面我要详细看的地方。</p>
<h4 id="第二部分-IDA基本用法"><a href="#第二部分-IDA基本用法" class="headerlink" title="第二部分 IDA基本用法"></a>第二部分 IDA基本用法</h4><h5 id="第4章-IDA入门"><a href="#第4章-IDA入门" class="headerlink" title="第4章 IDA入门"></a>第4章 IDA入门</h5><p>介绍了IDA使用的一些小技巧，并没有值得我记录的，要说我积累出来的就是<code>Esc</code>和<code>Ctrl+W</code>的使用了，还有<code>Space</code>,<code>Tab</code>,<code>N</code>,<code>Y</code>,<code>A</code>这些快捷键的使用，得益于参加的之前的实验室的项目。</p>
<ol>
<li>当你不小心拖动了一些窗口后，发现想移动却移动不回去了，使用Windows &gt; Reset Desktop可以恢复原始的布局。</li>
</ol>
<h5 id="第5章-IDA数据显示窗口"><a href="#第5章-IDA数据显示窗口" class="headerlink" title="第5章 IDA数据显示窗口"></a>第5章 IDA数据显示窗口</h5><p>介绍了IDA的一些常见的显示窗口，我算是比较熟悉了，这里就不记录了。<br>经常用到的有反汇编窗口、16进制窗口、字符串窗口、导入窗口、导出窗口、伪代码窗口。</p>
<h5 id="第6章-反汇编导航"><a href="#第6章-反汇编导航" class="headerlink" title="第6章 反汇编导航"></a>第6章 反汇编导航</h5><ol>
<li>对栈帧有了比较新的认识：<blockquote>
<p>编译器通过栈帧（也叫做激活记录）使得对函数参数和局部变量进行分配和释放的过程对程<br>序员透明。在将控制权转交给函数之前，编译器会插入代码，将函数参数放入栈帧内，并分配足<br>够的内存，以保存函数的局部变量。鉴于栈帧的结构，该函数的返回地址也存储在新的栈帧内。<br>使用栈帧使得递归成为可能，因为每个递归函数调用都有它自己的栈帧，这恰好将当前调用与前<br>一次调用分隔开来。</p>
</blockquote>
</li>
<li>对fastcall的新认识：<blockquote>
<p>fastcall约定是stdcall约定的一个变体，它向CPU寄存器（而非程序栈）最多传递两个参数。<br>Microsoft Visual C/C++ 和GNU gcc/g++（3.4及更低版本）编译器能够识别函数声明中的fastcall<br>修饰符。如果指定使用fastcall约定，则传递给函数的前两个参数将分别位于ECX和EDX寄存器<br>中。剩余的其他参数则以类似于stdcall约定的方式从右到左放入栈上。同样与stdcall约定类似<br>的是，在返回其调用方时，fastcall函数负责从栈中删除参数。下面的声明中即使用了fastcall<br>修饰符：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> fastcall <span class="title">demo_fastcall</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>;</span><br><span class="line">; demo_fastcall(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//programmmer calls demo_fastcall</span></span><br><span class="line">	push <span class="number">4</span></span><br><span class="line">	push <span class="number">3</span></span><br><span class="line">	mov edx, <span class="number">2</span></span><br><span class="line">	mov ecx, <span class="number">1</span></span><br><span class="line">	call demo_fastcall</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="第7章-反汇编操作"><a href="#第7章-反汇编操作" class="headerlink" title="第7章 反汇编操作"></a>第7章 反汇编操作</h5><p>也是自己比较熟悉的地方吧，数据的转换，数组的设置，函数的操作，类型的设置，在自己实习的时候做样本分析时都体验过了，那个远控木马至今印象深刻。</p>
<h5 id="第8章-数据类型与数据结构"><a href="#第8章-数据类型与数据结构" class="headerlink" title="第8章 数据类型与数据结构"></a>第8章 数据类型与数据结构</h5><ol>
<li>关于数组的成员的访问，本章中列出了三种类型的数组：全局变量的数组、栈生成的数组以及堆生成的数组。前两种数组的访问方式基本一致，都是直接获取数组变量的地址来进行赋值，而堆生成的数组由于是由<code>malloc</code>或者<code>new</code>等方法动态得到的，在IDA中静态分析时并不能得到其真正的地址，所以需要通过寄存器先获取其基址，再根据偏移访问其成员，这和结构体的访问类似。</li>
<li>同样也有对结构体的访问，也包括三中类型：全局的、栈分配的、堆分配的。如果一个结构体在堆中分配，那么对编译器来说，引用该结构体的唯一线索就是指向该结构体起始地址的指针。而另外两种在编译时是能够计算出其固定地址的。</li>
<li>解析头文件：要解析头文件，可以使用File&gt;Load File&gt;Parse C Header File（文件&gt;加载文件&gt;解析C 头<br>文件）选择你想要解析的头文件。</li>
<li>遇到虚函数的问题：虚函数是用于实现多态行为的，虚函数的地址在编译时不能确定，只能在即将调用进行时确定（通过虚函数表）。<blockquote>
<p>且C++中程序会以ecx作为this指针的载体传递给虚成员函数。</p>
</blockquote>
</li>
</ol>
<h5 id="第9章-交叉引用与绘图功能"><a href="#第9章-交叉引用与绘图功能" class="headerlink" title="第9章 交叉引用与绘图功能"></a>第9章 交叉引用与绘图功能</h5><ol>
<li><p>三种代码交叉引用：读取交叉引用、写入交叉引用、偏移交叉引用。</p>
<blockquote>
<p>一般而言，以一个程序指令字节为目标的写入交叉引用表示这是一段自修改代码，这种代码通常被视为无效代码，在恶意软件使用的“去模糊例程”（de-obfuscation routine）中经常可以发现这类代码。<br>偏移量交叉引用表示的是引用的是某个位置的地址，并非内容。</p>
</blockquote>
</li>
<li><p>关于<strong>基本块</strong>：</p>
</li>
</ol>
<blockquote>
<p>在计算机程序中，基本块是一条或数条指令的组合，它拥有唯一一个指向块起始位置的入口点和唯一一个指向块结束位置的退出点。<br>一般来说，除最后一条指令外，基本块中的每条指令都将控制权转交给它后面的“继任”指令。同样，除第一条指令外，基本块中的每条指令都从它“前任”指令那里接收控制权。<br>通常，为判定基本块，应忽略函数调用指令并未将控制权转交到当前函数这一事实，除非已知被调用的函数无法正常返回。基本块在行为方面有一个重要的特点，即一旦基本块中的第一条指令开始执行，块中的其他指令都会执行，直到最后一条指令。这个特点会对程序的运行时检测产生重大影响，因为这时不再需要为程序中的每一条指令设置一个断点，或者逐步执行程序，以记录程序执行的每一条指令。相反，你可以为每个基本块的第一条指令设置断点，当这些断点被触发时，相关块中的每一条指令都被标记为“已执行”。Pedram Amini 的PaiMei③框架中的Process Stalker 组件就是以这种方式执行的。</p>
</blockquote>
<ol start="3">
<li><code>F12</code>可以生成一个函数的外部流程图，不过很难看！<code>Ctrl+F12</code>可以生成整个二进制文件函数调用图，也很难看！</li>
<li>选定一个函数可以生成以其为源头或者目标的交叉引用图，View-&gt;Graphs-&gt;Xrefs from/to.</li>
<li>图形化的其他工具：<blockquote>
<p>自IDA 引入集成化反汇编图形模式后，这些困难有一部分得到了解决。但是，IDA 主要是一个反汇编器，生成图形并不是它的主要用途。对专用的图形分析工具感兴趣的读者可以研究专门用于此类目的的应用程序，如<code>BinNavi</code>，这款工具是Halvar Flake 的公司<code>Zynamics</code>开发的。</p>
</blockquote>
</li>
</ol>
<h5 id="第10章-IDA的多种面孔"><a href="#第10章-IDA的多种面孔" class="headerlink" title="第10章 IDA的多种面孔"></a>第10章 IDA的多种面孔</h5><p>介绍了IDA的控制台模式，在各种平台上的不同面孔，目前我只需关注Windows上的IDA控制台版本（idaw.exe），其实没什么好说的，书中的实际应用也还没有接触过。<br>另外还提了一下IDA的批量模式，批量模式是为了自动处理任务，这似乎和我后面打算做的插件有点关系，先在这儿提一下吧，有具体的参数说明。</p>
<blockquote>
<p>使用批量模式的主要目的是启动IDA，使它运行一段特定的IDC 脚本，并在该脚本完成后立即终止。</p>
</blockquote>
<h4 id="第三部分-IDA高级应用"><a href="#第三部分-IDA高级应用" class="headerlink" title="第三部分 IDA高级应用"></a>第三部分 IDA高级应用</h4><h5 id="第11章-定制IDA"><a href="#第11章-定制IDA" class="headerlink" title="第11章 定制IDA"></a>第11章 定制IDA</h5><p>ida目录下的cfg目录中的<code>ida.cfg, idagui.cfg, idatui.cfg</code>是IDA的设置文件，另外也可以新建一个<code>idauser.cfg</code>来重写其中的设置，这样便于在不同的ida中使用。<br>idagui.cfg是图形界面的配置，idatui.cfg是控制台模式的配置。</p>
<h5 id="第12章-使用FLIRT签名来识别库"><a href="#第12章-使用FLIRT签名来识别库" class="headerlink" title="第12章 使用FLIRT签名来识别库"></a>第12章 使用FLIRT签名来识别库</h5><p>FLIRT签名技术是用来识别可执行文件中的一些静态库的函数的，这样可以使逆向分析人员专注于程序本身的代码的分析。</p>
<ol>
<li><p>关于<code>Main</code>和<code>_start</code>:</p>
<blockquote>
<p>程序的入口点是即将执行的第一条指令的地址。因此，许多熟练的C 程序员错误地认为这就是main 函数的地址，但事实并非如此。程序的文件类型，而不是创建程序所使用的语言，决定了向这个程序提交命令行参数的方式。为了使加载器加载命令行参数的方式与程序预期接收参数的方式（例如，通过向main 提交参数）保持一致，程序必须在将控制权转交给main 之前执行一段初始化代码。IDA 将这段初始化代码作为程序的入口点，并将其标记为_start。<br>这段初始化代码还负责必须在main 运行之前完成的初始化任务。在C++程序中，这段代码负责确保在执行main 之前调用全局声明对象的构造函数。同样，为了在程序真正终止前调用所有全局对象的析构函数，必须插入在main 之后执行的清理代码（cleanup code）。</p>
</blockquote>
</li>
<li><p>如何生成签名文件：</p>
<blockquote>
<p>创建签名文件的基本过程听起来并不复杂，可以归结为4 个看似简单的步骤。<br>a. 获得一个你希望为其创建签名文件的静态库。<br>b. 利用其中一个FLAIR 解析器为该库创建一个模式文件。<br>c. 运行sigmake.exe 来处理生成的模式文件，并生成一个签名文件。<br>d. 将新的签名文件复制到<code>&lt;IDADIR&gt;/sig</code> 目录中，安装这个文件。</p>
</blockquote>
</li>
</ol>
<p>在之前的CTF经历中遇到过需要自己制作sig文件的题目，但是当时自己并没有仔细看，现在大概应该懂了。</p>
<h5 id="第13章-扩展IDA的知识"><a href="#第13章-扩展IDA的知识" class="headerlink" title="第13章 扩展IDA的知识"></a>第13章 扩展IDA的知识</h5><p>这一章主要是介绍til和ids的扩展功能，其主要作用就是让用户可以自定义设置自己的函数声明相关配置文件，这样在IDA自动分析的过程中就会识别出对应的函数的调用约定、参数类型、数量等。以后遇到具体的应用的时候可以再来重新仔细的看一遍。</p>
<ol>
<li>库函数中函数序号：<blockquote>
<p>序号是与每个导出函数有关的整数索引。使用序号可通过整数查询表迅速定位一个函数。若通过将函数名称与字符串进行比较来定位函数，则很缓慢。</p>
</blockquote>
</li>
<li>创建ids文件：<blockquote>
<p>IDA 的idsutils 实用工具用于创建.ids 文件。这些实用工具包括两个库解析器：从Windows DLL 中提取信息的dll2idt 和从ar 库中提取信息的ar2idt.exe。无论使用哪一个解析器，其输出都是一个.idt 文本文件，它每行显示一个导出函数，并将导出函数的序号与函数名称对应起来。</p>
<p><img src="//spwpun.github.io/2019/10/23/IDA-Pro阅读笔记/20191102094833.png" alt="20191102094833"></p>
</blockquote>
</li>
<li>修改注释，使用loadint实用工具，后续需要花点时间来研究一下怎么创建一个ids文件和til文件。</li>
</ol>
<h5 id="第14章-修补二进制文件及其他IDA的限制"><a href="#第14章-修补二进制文件及其他IDA的限制" class="headerlink" title="第14章 修补二进制文件及其他IDA的限制"></a>第14章 修补二进制文件及其他IDA的限制</h5><blockquote>
<p>IDA 并不是一个二进制文件编辑器。任何时候，如果你想要使用IDA 修补一个二进制文件，请记住这个事实。但是，它是一款特别有用的工具，可帮助你输入并显示潜在的更改。掌握IDA的全部功能，并结合IDA 通过适当的脚本或外部程序生成的信息，修补二进制文件也会变得简单可行。</p>
</blockquote>
<p>IDA 对二进制文件的修改这一方面感觉确实不行，如果要修改二进制文件，还是用专用的二进制编辑器吧，例如010 Editor、Winhex，扯一句，最近发现Winhex的功能真的挺强大的。</p>
<h4 id="第四部分-扩展IDA的功能"><a href="#第四部分-扩展IDA的功能" class="headerlink" title="第四部分 扩展IDA的功能"></a>第四部分 扩展IDA的功能</h4><h5 id="第15章-编写IDA脚本"><a href="#第15章-编写IDA脚本" class="headerlink" title="第15章  编写IDA脚本"></a>第15章  编写IDA脚本</h5>]]></content>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>图片测试</title>
    <url>/2019/10/18/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置_config.yml"></a>设置<code>_config.yml</code></h3><p>将<code>post_asset_folder</code>设置为<code>true</code>.</p><p><img src="//spwpun.github.io/2019/10/18/图片测试/config.png" alt="config"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>npm install hexo-asset-image --save</code></p><a id="more"></a>


<p><img src="//spwpun.github.io/2019/10/18/图片测试/1571383044609.png" alt="1571383044609"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建文章，添加图片到对应的文件夹下，使用<code>markdown</code>格式添加图片到文章中：</p>
<p><img src="//spwpun.github.io/2019/10/18/图片测试/1571383180135.png" alt="1571383180135"></p>
<h3 id="图片URL问题"><a href="#图片URL问题" class="headerlink" title="图片URL问题"></a>图片URL问题</h3><p>在文章中的图片链接为相对路径，即<code>Title/pic.jpg</code>类似的，但是插件的脚本文件有点问题，在CSDN上找到了一位大佬修改后的脚本，贴在下面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>大佬的原文链接：<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用KMS激活Office</title>
    <url>/2019/10/14/KMS%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>KMS技术是通过Key Manager Service服务的激活机制来激活Windows或者office的，能获取正版的产品密钥，不过密钥有有效期，不是永久的，所以等到有效期到了之后需要重新获取密钥。相比网上的一些破解软件来说要好的多。</p><a id="more"></a>
<h4 id="打开最新的KMS-Tools-by-Ratiborus-会出现多个应用选项。"><a href="#打开最新的KMS-Tools-by-Ratiborus-会出现多个应用选项。" class="headerlink" title="打开最新的KMS Tools by Ratiborus,会出现多个应用选项。"></a>打开最新的KMS Tools by Ratiborus,会出现多个应用选项。</h4><p><img src="https://img-blog.csdnimg.cn/20191014203629977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwbHA5ODIy,size_16,color_FFFFFF,t_70" alt="KMS 界面"></p>
<h4 id="点击”KMSoffline”-进入KMSoffline-x64-v2-1-3界面-有Main、Tools-andSettings、About四个菜单选项。"><a href="#点击”KMSoffline”-进入KMSoffline-x64-v2-1-3界面-有Main、Tools-andSettings、About四个菜单选项。" class="headerlink" title="点击”KMSoffline”,进入KMSoffline x64 v2.1.3界面,有Main、Tools andSettings、About四个菜单选项。"></a>点击”KMSoffline”,进入KMSoffline x64 v2.1.3界面,有Main、Tools andSettings、About四个菜单选项。</h4><p><img src="https://img-blog.csdnimg.cn/20191014203712167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwbHA5ODIy,size_16,color_FFFFFF,t_70" alt="KMSOffice"></p>
<h4 id="在下方”Product”处，可以选择激活Windows和office-当然office需要自己安装。"><a href="#在下方”Product”处，可以选择激活Windows和office-当然office需要自己安装。" class="headerlink" title="在下方”Product”处，可以选择激活Windows和office,当然office需要自己安装。"></a>在下方”Product”处，可以选择激活Windows和office,当然office需要自己安装。</h4><p><img src="https://img-blog.csdnimg.cn/20191014203751419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwbHA5ODIy,size_16,color_FFFFFF,t_70" alt="选择Product"></p>
<h4 id="然后点击右下方的”Information”可以查看Windows的版本信息或者office的版本信息，查看是否激活，有效期（）等什么的："><a href="#然后点击右下方的”Information”可以查看Windows的版本信息或者office的版本信息，查看是否激活，有效期（）等什么的：" class="headerlink" title="然后点击右下方的”Information”可以查看Windows的版本信息或者office的版本信息，查看是否激活，有效期（）等什么的："></a>然后点击右下方的”Information”可以查看Windows的版本信息或者office的版本信息，查看是否激活，有效期（）等什么的：</h4><p><img src="https://img-blog.csdnimg.cn/2019101420382834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwbHA5ODIy,size_16,color_FFFFFF,t_70" alt="查询信息"><br>   例如：下方是Windows的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  == Windows(R), ProfessionalWorkstation edition</span><br><span class="line">     Windows(R) Operating System, VOLUME_KMSCLIENT channel</span><br><span class="line">                          SKU ID: 82bbc092-bc50-4e16-8e18-b74fc486aec3</span><br><span class="line">    Partial Product Key: 6Q84J</span><br><span class="line">    KMS-host Machine: </span><br><span class="line">          KMS-Server PID: 03612-00206-557-633704-03-2052-17763.0000-1232019</span><br><span class="line">Expiration Date/Time: 179.20:24,  until 2020/4/11   //这里显示到2020/04/11过期。</span><br><span class="line">      Activation interval: 00.02:00</span><br><span class="line">         Renewal interval: 16.04:23</span><br><span class="line">             License Status: --- LICENSED ---</span><br><span class="line">      ---------------------------------------</span><br></pre></td></tr></table></figure>

<h4 id="所以”Product”选择office，查看信息，确定office版本，点击”Install-Key”-生成产品密钥，中间的白框框中就会出现提示信息，"><a href="#所以”Product”选择office，查看信息，确定office版本，点击”Install-Key”-生成产品密钥，中间的白框框中就会出现提示信息，" class="headerlink" title="所以”Product”选择office，查看信息，确定office版本，点击”Install Key”,生成产品密钥，中间的白框框中就会出现提示信息，"></a>所以”Product”选择office，查看信息，确定office版本，点击”Install Key”,生成产品密钥，中间的白框框中就会出现提示信息，</h4><p><img src="https://img-blog.csdnimg.cn/20191014203917105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwbHA5ODIy,size_16,color_FFFFFF,t_70" alt="Install Key"><br>最后的是密钥，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       ---------------------------------------</span><br><span class="line"> == Installation GVLK keys Office 19</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_KMS_Client_AE-ppd.xrm-ms</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_KMS_Client_AE-ul-oob.xrm-ms</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_KMS_Client_AE-ul.xrm-ms</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_MAK_AE-pl.xrm-ms</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_MAK_AE-ppd.xrm-ms</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_MAK_AE-ul-oob.xrm-ms</span><br><span class="line">Install License:</span><br><span class="line">ProPlus2019VL_MAK_AE-ul-phn.xrm-ms</span><br><span class="line">Uninstall key: 8MBCX</span><br><span class="line"></span><br><span class="line">Office 19, Office19ProPlus2019VL_KMS_Client_AE edition</span><br><span class="line">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP //这个是产品密钥</span><br></pre></td></tr></table></figure>

<h4 id="最后将上面的产品密钥复制到左下方的”Own-Key”中，点击右下方的”Activate”（激活）就可以激活了，"><a href="#最后将上面的产品密钥复制到左下方的”Own-Key”中，点击右下方的”Activate”（激活）就可以激活了，" class="headerlink" title="最后将上面的产品密钥复制到左下方的”Own Key”中，点击右下方的”Activate”（激活）就可以激活了，"></a>最后将上面的产品密钥复制到左下方的”Own Key”中，点击右下方的”Activate”（激活）就可以激活了，</h4><p>激活成功是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       ---------------------------------------</span><br><span class="line">== Activating Office 19, Office19ProPlus2019VL_KMS_Client_AE edition</span><br><span class="line"></span><br><span class="line"> Setting KMS-Service 10.3.0.20:1688 ...</span><br><span class="line"> KMS-Service 10.3.0.20:1688 successfully installed</span><br><span class="line"></span><br><span class="line"> Install KMS-Emulator ...</span><br><span class="line">              -------=======-------</span><br><span class="line"> === Product successfully activated ===</span><br><span class="line">              -------=======-------</span><br></pre></td></tr></table></figure>

<hr>
<p>一个俄罗斯人写的，<a href="https://filecr.com/windows/ratiborus-kms-tools/" target="_blank" rel="noopener">KMS Tools by Ratiborus</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>KMS</tag>
        <tag>office</tag>
      </tags>
  </entry>
</search>
